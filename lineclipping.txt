//line clipping
#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<math.h>

typedef struct coordinate
{
	int x, y;
	char code[4];
}pt;

void drawline(pt p1, pt p2)
{
	line(p1.x,p1.y,p2.x,p2.y);
}

void drawwindow()
{
	line(100,100,200,100);
	line(100,100,100,200);
	line(200,100,200,200);
	line(100,200,200,200);
}

pt setcode(pt p)
{
	if(p.y<100)
		p.code[0]='1';
	else
		p.code[0]='0';

	if(p.y>200)
		p.code[1]='1';
	else
		p.code[1]='0';

	if(p.x>200)
		p.code[2]='1';
	else
		p.code[2]='0';

	if(p.x<100)
		p.code[3]='1';
	else
		p.code[3]='0';
	return p;
}

int visibility(pt p1, pt p2)
{
	int i, flag=0;
	for(i=0;i<4;i++)
	{
		if( (p1.code[i]=='1') || (p2.code[i]=='1') )
			flag=1;
	}
	if(flag==0)
		return 0;

	for(i=0;i<4;i++)
	{
		if( (p1.code[i]==p2.code[i]) && (p1.code[i]=='1') )
			flag=0;
	}
	if(flag==0)
		return 1;

	return 2;
}

pt resetendpoint(pt p1, pt p2)
{
	pt temp;
	int x,y,i;
	float m,k;

	if(p1.code[3]=='1')
		x=100;

	if(p1.code[2]=='1')
		x=200;

	if((p1.code[3]=='1') || (p1.code[2]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		k=p1.y+m*(x-p1.x);
		temp.y=k;
		temp.x=x;
		for(i=0;i<4;i++)
		{
			temp.code[i]=p1.code[i];
		}

		if(temp.y<=200 && temp.y>=100)
			return temp;
	}

	if(p1.code[1]=='1')
		y=200;

	if(p1.code[0]=='1')
		y=100;

	if((p1.code[0]=='1') || (p1.code[1]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		k=p1.x+(float)(y-p1.y)/m;
		temp.y=y;
		temp.x=k;
		for(i=0;i<4;i++)
		{
			temp.code[i]=p1.code[i];
		}

		return temp;
	}
	else
		return p1;
}

void main()
{
	int gd=DETECT, gm, v;
	pt p1,p2,p3,p4,ptemp;
	initgraph(&gd, &gm, "C:\\TurboC3\\BGI");
	printf("Enter 1st point: ");
	scanf("%d%d", &p1.x, &p1.y);	
	printf("Enter 2nd point: ");
	scanf("%d%d", &p2.x, &p2.y);

	drawwindow();
	delay(500);
	drawline(p1,p2);
	delay(500);
	cleardevice();

	p1=setcode(p1);
	p2=setcode(p2);
	v=visibility(p1,p2);
	delay(500);
	switch(v)
	{
		case 0: drawwindow();
			delay(500);
			drawline(p1,p2);
			break;
		case 1: drawwindow();
			delay(500);
			break;
		case 2: p3=resetendpoint(p1,p2);
			p4=resetendpoint(p2,p1);
			drawwindow();
			delay(500);
			drawline(p3,p4);
			break;
	}
	getch();
	closegraph();
}